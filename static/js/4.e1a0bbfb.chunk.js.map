{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","pages/MainPage.js"],"names":["ErrorMessage","style","display","width","height","objectFit","margin","src","errorImg","alt","useMarvelService","useState","loading","setLoading","error","setError","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","message","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","offset","result","results","map","_transformCharacter","getOneCharacter","id","getAllComics","_transformComics","getOneComics","char","name","description","thumbnail","path","extension","homepage","urls","wiki","comics","items","length","slice","title","pageCount","language","textObjects","price","prices","View","includes","className","href","RandomChar","setChar","useEffect","updateChar","Math","floor","random","then","errorMessage","spinner","Spinner","content","onClick","mjolnir","CharList","props","charList","setCharList","newItemsLoading","setItemsLoading","setOffset","charEnded","setCharEnded","onRequest","initial","onCharListLoaded","newCharList","ended","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","arr","visibleList","index","ref","el","onCharSelected","onKeyPress","evt","key","tabIndex","renderItems","disabled","Skeleton","color","i","comicId","resourceURI","replace","to","CharInfo","charId","onCharLoaded","skeleton","ErrorBoundary","state","this","children","err","Component","MainPage","selectedChar","setSelectedChar","decoration"],"mappings":"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","file":"static/js/4.e1a0bbfb.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import errorImg from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    <img style={{ display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto' }} src={errorImg} alt=\"Возникла ошибка\" />\r\n  )\r\n}\r\n\r\nexport default ErrorMessage;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n  const { loading, error, request, clearError } = useHttp();\r\n\r\n  const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n  const _apiKey = 'apikey=382124e5ebc2fff76b70b64ce0e6f545';\r\n\r\n  const getAllCharacters = async (offset) => {\r\n    const result = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n    return result.data.results.map(_transformCharacter);\r\n  }\r\n\r\n  const getOneCharacter = async (id) => {\r\n    const result = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n    return _transformCharacter(result.data.results[0]);\r\n  }\r\n\r\n  const getAllComics = async (offset) => {\r\n    const result = await request(`${_apiBase}comics?orderBy=issueNumber&offset=${offset}&limit=8&${_apiKey}`);\r\n    return result.data.results.map(_transformComics);\r\n  }\r\n\r\n  const getOneComics = async (id) => {\r\n    const result = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n    return _transformComics(result.data.results[0]);\r\n  }\r\n\r\n  const _transformCharacter = (char) => {\r\n    return {\r\n      id: char.id,\r\n      name: char.name,\r\n      description: char.description ? char.description : 'Description not found',\r\n      thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items.length > 0 ? char.comics.items.slice(0, 10) : 'There are no comics with this character'\r\n    }\r\n  }\r\n\r\n  const _transformComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      title: comics.title,\r\n      description: comics.description || 'There is no description',\r\n      pageCount: comics.pageCount ? `${comics.pageCount} pages` : 'No information about the number of pages',\r\n      thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n      language: comics.textObjects.language || 'en-us',\r\n      price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'NOT AVAILABLE'\r\n    }\r\n  }\r\n  \r\n  return { loading, error, getAllCharacters, getOneCharacter, getAllComics, getOneComics, clearError };\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n    setLoading(true);\r\n\r\n    try {\r\n      const response = await fetch(url, {method, body, headers});\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      setLoading(false);\r\n      return data;\r\n    } catch(err) {\r\n      setLoading(false);\r\n      setError(err.message);\r\n      throw err;\r\n    }\r\n\r\n  }, []);\r\n\r\n  const clearError = useCallback(() => setError(null), []);\r\n\r\n  return {loading, error, request, clearError};\r\n};","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\n\nimport useMarvelService from '../../services/MarvelService';\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nconst RandomChar = () => {\n    const [char, setChar] = useState({});\n\n    const { loading, error, getOneCharacter, clearError } = useMarvelService();\n\n    useEffect(() => {\n        updateChar()\n    }, [])\n\n    const onCharLoaded = (newChar) => {\n        setChar(newChar);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getOneCharacter(id)\n            .then(data => onCharLoaded(data))\n    }\n\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const content = !(loading || error) ? <View char = {char} /> : null;\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br />\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button className=\"button button__main\" onClick={updateChar}>\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n            </div>\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki} = char;\n    const objectFit = (thumbnail && thumbnail.includes('not_available')) ? \"contain\" : \"cover\";\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={{objectFit: objectFit}} />\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charList.scss';\n\nconst CharList = (props) => {\n    const [charList, setCharList] = useState([]);\n    const [newItemsLoading, setItemsLoading] = useState(false);\n    const [offset, setOffset] = useState(Math.floor(Math.random() * (600 - 10) + 10));\n    const [charEnded, setCharEnded] = useState(false);\n\n    const { loading, error, getAllCharacters } = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setItemsLoading(false) : setItemsLoading(true);\n        getAllCharacters(offset)\n            .then(data => onCharListLoaded(data))\n    }\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n\n        setCharList(charList => [...charList, ...newCharList]);\n        setItemsLoading(newItemsLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended);\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    const renderItems = (arr) => {\n        const visibleList = arr.map((char, index) => {\n            return (\n                <li\n                    ref={el => itemRefs.current[index] = el}\n                    className=\"char__item\"\n                    key={char.id}\n                    onClick={() => {\n                        props.onCharSelected(char.id);\n                        focusOnItem(index);\n                    }}\n                    onKeyPress={(evt) => {\n                        if (evt.key === ' ' || evt.key === \"Enter\") {\n                            props.onCharSelected(char.id);\n                            focusOnItem(index);\n                        }\n                    }}\n                    tabIndex='0'>\n                    <img src={char.thumbnail} alt={char.name}/>\n                    <div className=\"char__name\">{char.name}</div>\n                </li>\n            );\n        });\n\n        // А эта конструкция вынесена для центровки спиннера/ошибки\n        return (\n            <ul className=\"char__grid\">\n                {visibleList}\n            </ul>\n        )\n    }\n\n    const items = renderItems(charList);\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemsLoading ? <Spinner/> : null;\n\n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button\n                className=\"button button__main button__long\"\n                disabled={newItemsLoading}\n                style={{display: charEnded ? 'none' : 'block'}}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n};\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport './charInfo.scss';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\n\nconst CharInfo = (props) => {\n    const [char, setChar] = useState(null);\n\n    const { loading, error, getOneCharacter, clearError } = useMarvelService();\n\n    useEffect(() => {\n        updateChar()\n    }, [props.charId])\n\n    // componentDidUpdate срабатывает, когда у нас меняется props, когда меняется state или когда мы принудительно заставляем компонент перерендерится с помощью спец. функции\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        const {charId} = props; \n\n        if (!charId) {\n            return;\n        }\n\n        clearError();\n        getOneCharacter(charId)\n            .then(onCharLoaded)\n    }\n\n    const skeleton = char || loading || error ? null : <Skeleton />;\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const content = !(loading || error || !char) ? <View char = {char} /> : null;\n\n    return (\n        <div className=\"char__info\">\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\n    const objectFit = thumbnail.includes('not_available') ? \"contain\" : \"cover\";\n\n    const getComicsListElement = () => {\n        if (typeof(comics) === 'string') {\n            return (\n                <li key={0} className=\"char__comics-item\" style={{color: 'red'}} >\n                    {comics}\n                </li>\n            )\n        } else {\n            const comicsList = comics.map((item, i) => {\n                const comicId = item.resourceURI.replace('http://gateway.marvel.com/v1/public/comics/', '');\n                return (\n                    <li key={i} className=\"char__comics-item\" >\n                        <Link to={\"/marvel-info/comics/\" + comicId}>{item.name}</Link>\n                    </li>\n                )\n            })\n            return comicsList;            \n        }\n    };\n    \n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={{objectFit: objectFit}} />\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {getComicsListElement()}\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import { Component } from \"react\";\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\n\r\nclass ErrorBoundary extends Component {\r\n  state = {\r\n    error: false\r\n  }\r\n  \r\n  static getDerivedStateFromError(err) {\r\n    return { error: true };\r\n\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error) {\r\n      return <ErrorMessage />\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\r\n\r\nimport RandomChar from \"../components/randomChar/RandomChar\";\r\nimport CharList from \"../components/charList/CharList\";\r\nimport CharInfo from \"../components/charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../components/errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from '../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n  const [selectedChar, setSelectedChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setSelectedChar(id);\r\n    }\r\n\r\n  return (\r\n    <>\r\n      <ErrorBoundary>\r\n        <RandomChar/>\r\n      </ErrorBoundary>\r\n      <div className=\"char__content\">\r\n        <ErrorBoundary>\r\n          <CharList onCharSelected={onCharSelected}/>\r\n        </ErrorBoundary>\r\n        <ErrorBoundary>\r\n          <CharInfo charId={selectedChar}/>\r\n        </ErrorBoundary>\r\n      </div>\r\n      <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainPage;"],"sourceRoot":""}